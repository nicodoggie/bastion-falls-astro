---
import type { CharacterSexOrgan, CharacterOrganization, CharacterFamily } from '@bastion-falls/types/Character';
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import { type CollectionEntry, getEntry } from 'astro:content';
import { slug } from 'github-slugger';

const { character } = Astro.props;

let image;
if(character?.image?.url) {
  const images = import.meta.glob<{default: ImageMetadata}>("/src/assets/**/*.{jpg,jpeg,png,webp}");
  image =  images[character.image.url]();
}

let mortalityIcon;
switch(character.details.mortality) {
  case 'dead':
    mortalityIcon = 'ðŸ’€';
    break;
  case 'alive':
    mortalityIcon = '';
    break;
  case 'undead':
    mortalityIcon = 'ðŸ§Ÿ';
    break;
  case 'unknown':
    mortalityIcon = 'ï¿½';
    break;
}

let species;
if(character?.details?.species) {
  if(! Array.isArray(character.details.species)) {
    species = [await getEntry('species', slug(character.details.species))];
  } else {
    species = await Promise.all(
      character.details.species.map(
        async (species: string) => await getEntry('species', slug(species))
      )
    );
  }
}

interface Relative {
  name: string;
  type: string;
  entry: CollectionEntry<"character">;
}


let relatives: Relative[] = [];
if(character?.relationships?.relatives) {
  relatives = (await Promise
    .allSettled<Relative>(
      character.relationships.relatives.map(
        async ({name, type}: {name: string, type: string}) => {
          const sluggedName = slug(name);
          if(sluggedName) {
            const entry = await getEntry('character', sluggedName); 
            return {name, type, entry};
          }
          throw new Error(`Relative ${name} has no slugged name`);
        }
      )
    ))
    .map((settled) => settled.status === 'fulfilled' ? settled.value : null)
    .filter((relative) => relative !== null);
}

// Sort by relative type
relatives.sort((a, b) => a.type.localeCompare(b.type));

interface OrganizationData {
  positionsHeld: CharacterOrganization['positionsHeld'];
  entry: CollectionEntry<"organization">;
}
let organizations: OrganizationData[] = [];
if(character?.relationships?.organizations) {
  organizations = (await Promise.allSettled<OrganizationData>(
    character.relationships.organizations.map(
      async (organization: CharacterOrganization) => {
        const sluggedName = slug(organization.name);
        if(sluggedName) {
        const entry = await getEntry('organization', sluggedName);
          return {positionsHeld: organization.positionsHeld, entry};
        }
        throw new Error(`Organization ${organization.name} has no slugged name`);
      }
    )
  ))
    .map((settled) => settled.status === 'fulfilled' ? settled.value : null)
    .filter((organization) => organization !== null);
}

interface FamilyData {
  name: string;
  entry: CollectionEntry<"family">;
}

let families: FamilyData[] = [];
if(character?.relationships?.families) {
  families = (await Promise.allSettled<FamilyData>(
    character.relationships.families.map(
      async (family: CharacterFamily) => {
        const sluggedName = slug(family.name);
        if(sluggedName) {
          const entry = await getEntry('family', sluggedName);
          return {name: family.name, entry};
        }
        throw new Error(`Family ${family.name} has no slugged name`);
      }
    )
  ))
    .map((settled) => settled.status === 'fulfilled' ? settled.value : null)
    .filter((family) => family !== null);
}

---
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 w-full max-w-full">
  {
    character.name && (
      <div class="flex justify-center items-center border-gray-600">
        <a href={character.ddb} target="_blank" rel="noopener noreferrer">
          <h2 class="text-xl text-center font-bold text-gray-900 dark:text-white" style="display: inline-block;">
            {character.name}<span class="mortality-icon p-1">{mortalityIcon}</span>
          </h2>
        </a>
      </div>
      <hr class="border-gray-600">
    )
  }
  {
    image && (
      <div class="mb-4 w-full character-image-container bg-black">
        <Image 
          src={image} 
          alt={character.image.alt || character.name || ""} 
          title={character.image.attribution}
          class="w-full h-full max-h-48 rounded-lg object-scale-down block mx-auto"
        />
        <p class="text-xs text-gray-500 mt-1 text-center">
          <a href={character.image.attributionUrl} target="_blank" rel="noopener noreferrer">
            {character.image.attribution}
          </a>
        </p>
      </div>
    )
  }

  <div class="space-y-4">
    <dl class="divide-y divide-gray-200 dark:divide-gray-700">
      
      {
        character.details?.age && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Age
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.age}
            </dd>
          </div>
        )
      }
      {
        character.details?.dateOfBirth && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Date of Birth
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.dateOfBirth}
            </dd>
          </div>
        )
      }
      {
        character.details?.dateOfDeath && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Date of Death
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.dateOfDeath}
            </dd>
          </div>
        )
      }
      {
        character?.details.sex && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Sex
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.sex}{character.details.pronouns && ` (${character.details.pronouns})`}
            </dd>
          </div>
        )
      }
      {
        character?.details.sexOrgans && character.details.sexOrgans.length > 0 && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Genitalia
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              <dl>
                {character.details.sexOrgans.map((organ: CharacterSexOrgan) => (
                  <div>
                    {organ.type === "penis" && (
                      <>
                        Penis
                        <dl class="ml-4">
                          {organ.length && <dt class="pl-2">Length</dt> <dd class="pl-4">{organ.length}</dd>}
                          {organ.girth && <dt class="pl-2">Girth</dt> <dd class="pl-4">{organ.girth}</dd>}
                          {organ.pubicHair && <dt class="pl-2">Pubic Hair</dt> <dd class="pl-4">{organ.pubicHair}</dd>}
                        </dl>
                      </>
                    )}
                    {organ.type === "vagina" && (
                      <>
                        Vagina
                        <dl class="ml-4">
                          {organ.depth && <dt class="pl-2">Depth</dt> <dd class="pl-4">{organ.depth}</dd>}
                          {organ.width && <dt class="pl-2">Width</dt> <dd class="pl-4">{organ.width}</dd>}
                          {organ.pubicHair && <dt class="pl-2">Pubic Hair</dt> <dd class="pl-4">{organ.pubicHair}</dd>}
                        </dl>
                      </>
                    )}
                    {organ.type === "breasts" && (
                      <>
                        Breasts
                        <dl class="ml-4">
                          {organ.size && <dt class="pl-2">Size</dt> <dd class="pl-4">{organ.size}</dd>}
                          {organ.nipples && <dt class="pl-2">Nipples</dt> <dd class="pl-4">{organ.nipples}</dd>}
                        </dl>
                      </>
                    )}
                  </div>
                ))}
              </dl>
            </dd>
          </div>
        )
      }
      {
        character.details?.origin && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Origin
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.origin}
            </dd>
          </div>
        )
      }
      {
        character.background?.alignment && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Alignment
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.background.alignment.moral}{' '}
              {character.background.alignment.law}
            </dd>
          </div>
        )
      }
      {
        character.details?.aliases && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Known Aliases
            </dt>
            { 
              character.details.aliases.length > 0 && character.details.aliases.map((alias: any) => {
                return (
                  <dd class="text-gray-600 dark:text-gray-400">
                    <span data-pagefind-meta="alias">{alias}</span>
                  </dd>
                )
              })
            }
            
          </div>
        )
      }
      {
        organizations && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Organizations
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              
              
                {organizations.map(
                  ({positionsHeld, entry}) => (
                    <a class="text-gray-600 dark:text-gray-400" href={`/organizations/${entry?.id}`}>{entry?.data.title}</a>
                    <ul class="ml-4 text-xs">
                      {positionsHeld && positionsHeld.map((position: any) => (
                        <li>{position.name} {position.from && `(${position.from}`} {position.to && ` - ${position.to})`}</li>
                      ))}
                    </ul>
                  )
                )}
            </dd>
          </div>
        )
      }
      {
        relatives && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Relatives
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              <ul>
                {relatives.map((relative: Relative) => {
                  return (
                  <li>
                    <a href={relative.entry && `/characters/${relative.entry?.id}`}>
                      {relative.entry?.data.title || relative.name}
                      {relative.type && ` (${relative.type})`}
                    </a>
                  </li>
                  );
                })}
              </ul>
            </dd>
          </div>
        )
      }
      {
        character.relationships?.other && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Relatives
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              <ul>
                {relatives.map((relative: Relative) => {
                  return (
                  <li>
                    <a href={`/characters/${relative.entry?.id}`}>
                      {relative.entry?.data.title || relative.name}
                      {relative.type && ` (${relative.type})`}
                    </a>
                  </li>
                  );
                })}
              </ul>
            </dd>
          </div>
        )
      }
      {
        families && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Families
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              <ul>
                {families.map((family: {name: string, entry: CollectionEntry<"family">}) => (
                  <li>
                    <a href={family.entry && `/world/families/${family.entry?.id}`}>{family.name}</a>
                  </li>
                ))}
              </ul>
            </dd>
          </div>
        )
      }
      {
        character.details?.species && species && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Species
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              <ul>
                {species.map((species: CollectionEntry<"species">) => (
                  <li>
                    <a href={`/world/species/${species.id}`}>{species.data.title}</a>
                  </li>
                ))}
              </ul>
            </dd>
          </div>
        )
      }
      {
        character.details?.height && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Height
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.height}
            </dd>
          </div>
        )
      }
      {
        character.details?.weight && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Weight
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.details.weight}
            </dd>
          </div>
        )
      }
      {
        character.background?.goals && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Goals
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.background.goals}
            </dd>
          </div>
        )
      }
      {
        character.background?.flaws && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Flaws
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.background.flaws}
            </dd>
          </div>
        )
      }
      {
        character.background?.backstory && (
          <div class="py-2">
            <dt class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Backstory
            </dt>
            <dd class="text-gray-600 dark:text-gray-400">
              {character.background.backstory}
            </dd>
          </div>
        )
      }
    </dl>
  </div>
</div>
