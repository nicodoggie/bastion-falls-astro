---
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import { slug } from 'github-slugger';
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

const { location } = Astro.props;

let image;
if(location?.image?.url) {
  const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/**/*.{jpg,jpeg,png,webp}");
  image = images[location.image.url]();
}

// Get parent location entries if they exist
let parents: CollectionEntry<"location">[] = [];
if(location?.parents) {
  parents = (await Promise.all(
    location.parents.map(
      async (parentName: string) => {
        const parentEntry = await getEntry('location', slug(parentName));
        return parentEntry;
      }
    )
  )).filter((parent) => parent);
}

// Get related location entries if they exist
let related: CollectionEntry<"location">[] = [];
if(location?.related) {
  related = (await Promise.all(
    location.related.map(
      async (relatedName: string) => {
        const relatedEntry = await getEntry('location', slug(relatedName));
        return relatedEntry;
      }
    )
  )).filter((rel) => rel);
}

---
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 w-full max-w-full">
  {
    location.name && (
      <div class="flex justify-center items-center border-gray-600">
        <h2 class="text-xl text-center font-bold text-gray-900 dark:text-white">
          {location.name}
        </h2>
      </div>
      <hr class="border-gray-600">
    )
  }
  
  {
    location.image && (
      <div class="mb-4 w-full character-image-container bg-black">
        <Image 
          src={image} 
          alt={location.image.alt || location.name} 
          title={location.image.attribution}
          class="w-full h-full max-h-48 rounded-lg object-scale-down block mx-auto"
        />
        <p class="text-xs text-gray-500 mt-1 text-center">
          <a href={location.image.attributionUrl} target="_blank" rel="noopener noreferrer">
            {location.image.attribution}
          </a>
        </p>
      </div>
    )
  }

  <div class="space-y-4">
    <ul class="divide-y divide-gray-200 dark:divide-gray-700">
      
      {
        location?.type && (
          <li class="py-2">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Type
            </h3>
            <p class="text-gray-600 dark:text-gray-400">
              {location.type.charAt(0).toUpperCase() + location.type.slice(1)}
            </p>
          </li>
        )
      }
      
      {
        location.details?.population && (
          <li class="py-2">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Population
            </h3>
            <p class="text-gray-600 dark:text-gray-400">
              {location.details.population}
            </p>
          </li>
        )
      }
      
      {
        location.details?.area && (
          <li class="py-2">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Area
            </h3>
            <p class="text-gray-600 dark:text-gray-400">
              {location.details.area}
            </p>
          </li>
        )
      }
      
      {
        parents && parents.length > 0 && (
          <li class="py-2">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Parent Locations
            </h3>
            <ul class="text-gray-600 dark:text-gray-400">
              {parents.map((parent: CollectionEntry<"location">) => (
                <li>
                  <a href={`/locations/${parent.id}`}>
                    {parent.data.location.name}
                  </a>
                </li>
              ))}
            </ul>
          </li>
        )
      }
      
      {
        related && related.length > 0 && (
          <li class="py-2">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Related Locations
            </h3>
            <ul class="text-gray-600 dark:text-gray-400">
              {related.map((relatedLocation: CollectionEntry<"location">) => (
                <li>
                  <a href={`/locations/${relatedLocation.id}`}>
                    {relatedLocation.data.location.name}
                  </a>
                </li>
              ))}
            </ul>
          </li>
        )
      }
      
      {
        location.sections && location.sections.length > 0 && (
          <li class="py-2">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">
              Sections
            </h3>
            <ul class="text-gray-600 dark:text-gray-400">
              {location.sections.map((section) => (
                <li>
                  <strong>{section.name}</strong>
                  {section.description && (
                    <div class="text-sm mt-1">{section.description}</div>
                  )}
                  {section.population && (
                    <div class="text-sm">Population: {section.population}</div>
                  )}
                  {section.area && (
                    <div class="text-sm">Area: {section.area}</div>
                  )}
                </li>
              ))}
            </ul>
          </li>
        )
      }
      
    </ul>
  </div>
</div> 